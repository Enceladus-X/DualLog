"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Download, Upload, Zap, TrendingUp, Clock, Target, ArrowUpDown, User, Users } from "lucide-react"
import {
  getDeckStats,
  getMatchupStats,
  getPositionStats,
  getTimeStats,
  getStreakStats,
  getMostPlayedDeck,
  type DeckStats,
  type MatchupStats,
  type PositionStats,
  type TimeStats,
  type StreakStats,
} from "../utils/stats-utils"

interface Match {
  yourDeck: string
  opponentDeck: string
  position: "first" | "second"
  result: "win" | "lose"
  timestamp: string
  winStreak: number
  note?: string
}

interface DailyRecord {
  date: string
  matches: Match[]
  totalGames: number
  wins: number
  losses: number
  draws: number
  winRate: number
}

interface AppSettings {
  language: "ko" | "en"
  theme: "light" | "dark"
}

interface StatsViewProps {
  allTimeStats: DailyRecord[]
  todayMatches: Match[]
  allMatches: Match[]
  onBack: () => void
  onExportCSV: () => void
  onImportCSV: () => void
  bestDeck: DeckStats | undefined
  t: any
  settings: AppSettings
}

export default function StatsView({
  allTimeStats,
  todayMatches,
  allMatches,
  onBack,
  onExportCSV,
  onImportCSV,
  bestDeck,
  t,
  settings,
}: StatsViewProps) {
  const [activeTab, setActiveTab] = useState("overview")
  const [filterDeck, setFilterDeck] = useState<string>("all")
  const [filterOpponentDeck, setFilterOpponentDeck] = useState<string>("all")
  const [filterResult, setFilterResult] = useState<string>("all")
  const [sortBy, setSortBy] = useState<string>("date")
  const [matchupSortBy, setMatchupSortBy] = useState<string>("winRate")

  // 디버깅 정보
  console.log("StatsView - 전체 매치 수:", allMatches.length)
  console.log("StatsView - 오늘 매치 수:", todayMatches.length)
  console.log("StatsView - 첫 번째 매치:", allMatches[0])

  const totalDays = allTimeStats.length
  const totalGames = allMatches.length
  const totalWins = allMatches.filter((m) => m.result === "win").length
  const totalLosses = allMatches.filter((m) => m.result === "lose").length
  const overallWinRate = totalGames > 0 ? (totalWins / totalGames) * 100 : 0

  console.log("StatsView - 총 게임:", totalGames, "승:", totalWins, "패:", totalLosses, "승률:", overallWinRate)

  const streakStats: StreakStats = getStreakStats(allMatches)
  const deckStats: DeckStats[] = getDeckStats(allMatches)
  const matchupStats: MatchupStats[] = getMatchupStats(allMatches)
  const positionStats: PositionStats = getPositionStats(allMatches)
  const timeStats: TimeStats[] = getTimeStats(allMatches)
  const mostPlayedDeck = getMostPlayedDeck(allMatches)

  const filteredMatches = allMatches
    .filter((match) => {
      if (filterDeck !== "all" && match.yourDeck !== filterDeck) return false
      if (filterOpponentDeck !== "all" && match.opponentDeck !== filterOpponentDeck) return false
      if (filterResult !== "all" && match.result !== filterResult) return false
      return true
    })
    .sort((a, b) => {
      switch (sortBy) {
        case "date":
          return new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()
        case "yourDeck":
          return a.yourDeck.localeCompare(b.yourDeck)
        case "opponentDeck":
          return a.opponentDeck.localeCompare(b.opponentDeck)
        case "result":
          return a.result.localeCompare(b.result)
        default:
          return 0
      }
    })

  const uniqueDecks = Array.from(new Set(allMatches.map((m) => m.yourDeck)))
  const uniqueOpponentDecks = Array.from(new Set(allMatches.map((m) => m.opponentDeck)))

  const generateTodayReport = () => {
    if (todayMatches.length === 0) {
      alert(t.noGamesRecorded)
      return
    }

    const wins = todayMatches.filter((m) => m.result === "win").length
    const losses = todayMatches.filter((m) => m.result === "lose").length
    const winRate = ((wins / todayMatches.length) * 100).toFixed(1)
    const today = new Date().toISOString().split("T")[0]

    const report = `
=== ${today} ${t.games} ${t.stats} ===

📊 ${t.overview}
• ${t.totalGames}: ${todayMatches.length}
• ${t.wins}: ${wins} | ${t.losses}: ${losses}
• ${t.winRate}: ${winRate}%

📋 ${t.detailed}
${todayMatches
  .map(
    (match, i) =>
      `${i + 1}. ${match.yourDeck} vs ${match.opponentDeck} (${match.position === "first" ? t.firstShort : t.secondShort}) → ${match.result === "win" ? t.wins : t.losses}`,
  )
  .join("\n")}

Generated by ${t.appName}
    `.trim()

    const blob = new Blob([report], { type: "text/plain;charset=utf-8" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `${t.appName}_${today}.txt`
    a.click()
    URL.revokeObjectURL(url)
  }

  // 매치업 통계를 정렬하는 로직 수정
  const sortedMatchupStats = matchupStats.sort((a, b) => {
    switch (matchupSortBy) {
      case "winRate":
        return b.winRate - a.winRate
      case "yourDeck":
        return a.yourDeck.localeCompare(b.yourDeck)
      default:
        return b.winRate - a.winRate
    }
  })

  // 최다 연승을 기록한 덱 찾기
  const maxStreakDeck =
    allMatches.filter((m) => m.winStreak === streakStats.maxStreak).map((m) => m.yourDeck)[0] || "알 수 없음"

  return (
    <div className={`w-96 h-[600px] overflow-y-auto ${settings.theme === "dark" ? "bg-gray-900" : "bg-gray-50"}`}>
      <div className="p-4">
        <div className="flex items-center justify-between mb-4">
          <Button
            variant="ghost"
            size="sm"
            onClick={onBack}
            className={settings.theme === "dark" ? "text-white hover:bg-gray-800" : "hover:bg-gray-100"}
          >
            ← {t.back}
          </Button>
          <h1 className={`text-lg font-bold ${settings.theme === "dark" ? "text-white" : "text-gray-800"}`}>
            {t.statsAnalysis}
          </h1>
          <div className="flex gap-1">
            <Button
              onClick={onExportCSV}
              variant="outline"
              size="sm"
              title={t.csvExport}
              className={`p-2 ${settings.theme === "dark" ? "bg-gray-800 border-gray-700 text-white" : "bg-transparent"}`}
            >
              <Download className="h-3 w-3" />
            </Button>
            <Button
              onClick={onImportCSV}
              variant="outline"
              size="sm"
              title={t.csvImport}
              className={`p-2 ${settings.theme === "dark" ? "bg-gray-800 border-gray-700 text-white" : "bg-transparent"}`}
            >
              <Upload className="h-3 w-3" />
            </Button>
          </div>
        </div>

        <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
          <TabsList className={`grid w-full grid-cols-4 mb-4 ${settings.theme === "dark" ? "bg-gray-800" : ""}`}>
            <TabsTrigger value="overview" className="text-xs">
              {t.overview}
            </TabsTrigger>
            <TabsTrigger value="detailed" className="text-xs">
              {t.detailed}
            </TabsTrigger>
            <TabsTrigger value="matchup" className="text-xs">
              {t.matchup}
            </TabsTrigger>
            <TabsTrigger value="history" className="text-xs">
              {t.history}
            </TabsTrigger>
          </TabsList>

          <TabsContent value="overview" className="space-y-4">
            {totalGames === 0 ? (
              <Card
                className={`shadow-sm ${settings.theme === "dark" ? "bg-gray-800 border-gray-700" : "border-gray-200"}`}
              >
                <CardContent className="p-6 text-center">
                  <div
                    className={`text-lg font-medium mb-2 ${settings.theme === "dark" ? "text-white" : "text-gray-800"}`}
                  >
                    데이터를 불러오는 중...
                  </div>
                  <div className={`text-sm ${settings.theme === "dark" ? "text-gray-400" : "text-gray-600"}`}>
                    CSV 파일에서 전적 데이터를 로드하고 있습니다.
                  </div>
                </CardContent>
              </Card>
            ) : (
              <>
                <Card className="bg-gradient-to-br from-blue-400 to-blue-500 border-blue-400 shadow-lg">
                  <CardContent className="p-6 text-center text-white">
                    <div className="text-4xl font-bold mb-2">{overallWinRate.toFixed(1)}%</div>
                    <div className="text-blue-100 text-sm">{t.totalWinRate}</div>
                    <div className="text-blue-200 text-xs mt-1">
                      {totalGames}
                      {t.games} 중 {totalWins}
                      {t.wins}
                    </div>
                  </CardContent>
                </Card>

                <div className="grid grid-cols-3 gap-2">
                  <Card
                    className={`shadow-sm ${settings.theme === "dark" ? "bg-gray-800 border-gray-700" : "bg-blue-50 border-blue-200"}`}
                  >
                    <CardContent className="p-3 text-center">
                      <div
                        className={`text-lg font-bold ${settings.theme === "dark" ? "text-blue-400" : "text-blue-600"}`}
                      >
                        {totalGames}
                      </div>
                      <div className={`text-xs ${settings.theme === "dark" ? "text-gray-400" : "text-gray-600"}`}>
                        {t.totalGames}
                      </div>
                    </CardContent>
                  </Card>
                  <Card
                    className={`shadow-sm ${settings.theme === "dark" ? "bg-gray-800 border-gray-700" : "bg-green-50 border-green-200"}`}
                  >
                    <CardContent className="p-3 text-center">
                      <div
                        className={`text-lg font-bold ${settings.theme === "dark" ? "text-green-400" : "text-green-600"}`}
                      >
                        {totalWins}
                      </div>
                      <div className={`text-xs ${settings.theme === "dark" ? "text-gray-400" : "text-gray-600"}`}>
                        {t.wins}
                      </div>
                    </CardContent>
                  </Card>
                  <Card
                    className={`shadow-sm ${settings.theme === "dark" ? "bg-gray-800 border-gray-700" : "bg-red-50 border-red-200"}`}
                  >
                    <CardContent className="p-3 text-center">
                      <div
                        className={`text-lg font-bold ${settings.theme === "dark" ? "text-red-400" : "text-red-600"}`}
                      >
                        {totalLosses}
                      </div>
                      <div className={`text-xs ${settings.theme === "dark" ? "text-gray-400" : "text-gray-600"}`}>
                        {t.losses}
                      </div>
                    </CardContent>
                  </Card>
                </div>

                <Card
                  className={`shadow-sm ${settings.theme === "dark" ? "bg-gray-800 border-gray-700" : "border-gray-200"}`}
                >
                  <CardContent className="p-4">
                    <div
                      className={`text-sm font-semibold mb-3 flex items-center ${settings.theme === "dark" ? "text-white" : "text-gray-800"}`}
                    >
                      <Zap className="h-4 w-4 mr-1 text-yellow-500" />
                      {t.bestRecords}
                    </div>
                    <div className="grid grid-cols-3 gap-2">
                      <div
                        className={`p-2 rounded-lg border ${settings.theme === "dark" ? "bg-gray-700 border-gray-600" : "bg-yellow-50 border-yellow-200"}`}
                      >
                        <div
                          className={`text-xs font-bold ${settings.theme === "dark" ? "text-yellow-400" : "text-yellow-800"}`}
                        >
                          {t.maxWinStreak}
                        </div>
                        <div
                          className={`text-base font-bold ${settings.theme === "dark" ? "text-yellow-300" : "text-yellow-900"}`}
                        >
                          {streakStats.maxStreak}연승
                        </div>
                        <div className={`text-xs ${settings.theme === "dark" ? "text-gray-400" : "text-gray-600"}`}>
                          {maxStreakDeck}
                        </div>
                      </div>
                      {bestDeck && (
                        <div
                          className={`p-2 rounded-lg border ${settings.theme === "dark" ? "bg-gray-700 border-gray-600" : "bg-blue-50 border-blue-200"}`}
                        >
                          <div
                            className={`text-xs font-bold ${settings.theme === "dark" ? "text-blue-400" : "text-blue-800"}`}
                          >
                            {t.bestWinRateDeck}
                          </div>
                          <div
                            className={`text-sm font-bold ${settings.theme === "dark" ? "text-blue-300" : "text-blue-900"}`}
                          >
                            {bestDeck.deck}
                          </div>
                          <div className={`text-xs ${settings.theme === "dark" ? "text-gray-400" : "text-gray-600"}`}>
                            {bestDeck.winRate.toFixed(1)}% ({bestDeck.total}
                            {t.games})
                          </div>
                        </div>
                      )}
                      {mostPlayedDeck && (
                        <div
                          className={`p-2 rounded-lg border ${settings.theme === "dark" ? "bg-gray-700 border-gray-600" : "bg-purple-50 border-purple-200"}`}
                        >
                          <div
                            className={`text-xs font-bold ${settings.theme === "dark" ? "text-purple-400" : "text-purple-800"}`}
                          >
                            {t.mostPlayedDeck}
                          </div>
                          <div
                            className={`text-sm font-bold ${settings.theme === "dark" ? "text-purple-300" : "text-purple-900"}`}
                          >
                            {mostPlayedDeck.deck}
                          </div>
                          <div className={`text-xs ${settings.theme === "dark" ? "text-gray-400" : "text-gray-600"}`}>
                            {mostPlayedDeck.count}
                            {t.games}
                          </div>
                        </div>
                      )}
                    </div>
                  </CardContent>
                </Card>
              </>
            )}
          </TabsContent>

          <TabsContent value="detailed" className="space-y-4">
            <Card
              className={`shadow-sm ${settings.theme === "dark" ? "bg-gray-800 border-gray-700" : "border-gray-200"}`}
            >
              <CardHeader className="pb-3">
                <CardTitle
                  className={`text-sm font-semibold flex items-center ${settings.theme === "dark" ? "text-white" : "text-gray-800"}`}
                >
                  <TrendingUp className="h-4 w-4 mr-1 text-blue-500" />
                  {t.mostPlayedDeck}
                </CardTitle>
              </CardHeader>
              <CardContent className="pt-0">
                {(() => {
                  const deckUsage = new Map<string, { count: number; wins: number; losses: number }>()

                  allMatches.forEach((match) => {
                    const deck = match.yourDeck
                    if (!deckUsage.has(deck)) {
                      deckUsage.set(deck, { count: 0, wins: 0, losses: 0 })
                    }
                    const stats = deckUsage.get(deck)!
                    stats.count++
                    if (match.result === "win") {
                      stats.wins++
                    } else {
                      stats.losses++
                    }
                  })

                  const topDecks = Array.from(deckUsage.entries())
                    .map(([deck, stats]) => ({
                      deck,
                      count: stats.count,
                      wins: stats.wins,
                      losses: stats.losses,
                      winRate: stats.count > 0 ? (stats.wins / stats.count) * 100 : 0,
                    }))
                    .sort((a, b) => b.count - a.count)
                    .slice(0, 3)

                  if (topDecks.length === 0) {
                    return (
                      <div
                        className={`text-center py-8 text-sm ${settings.theme === "dark" ? "text-gray-400" : "text-gray-500"}`}
                      >
                        {t.noDecksUsed}
                      </div>
                    )
                  }

                  return (
                    <div className="grid grid-cols-2 gap-3 h-40">
                      {topDecks[0] && (
                        <div className="p-3 rounded-lg border flex flex-col justify-center bg-blue-50 border-blue-200">
                          <div className="text-gray-800">
                            <div className="text-xs font-medium text-blue-600 mb-1">{t.rank1}</div>
                            <div className="text-lg font-bold mb-1 truncate text-blue-800" title={topDecks[0].deck}>
                              {topDecks[0].deck}
                            </div>
                            <div className="text-xs text-blue-700">
                              {topDecks[0].count}
                              {t.games} • {topDecks[0].winRate.toFixed(1)}%
                            </div>
                            <div className="text-xs text-blue-600">
                              {topDecks[0].wins}
                              {t.wins} {topDecks[0].losses}
                              {t.losses}
                            </div>
                          </div>
                        </div>
                      )}

                      <div className="flex flex-col gap-3">
                        {topDecks[1] ? (
                          <div
                            className={`p-2 rounded-lg border flex-1 ${
                              settings.theme === "dark" ? "bg-gray-700 border-gray-600" : "bg-green-50 border-green-200"
                            }`}
                          >
                            <div className={settings.theme === "dark" ? "text-white" : "text-gray-800"}>
                              <div
                                className={`text-xs font-medium mb-1 ${settings.theme === "dark" ? "text-gray-400" : "text-gray-600"}`}
                              >
                                {t.rank2}
                              </div>
                              <div className="text-sm font-bold mb-1 truncate" title={topDecks[1].deck}>
                                {topDecks[1].deck}
                              </div>
                              <div
                                className={`text-xs ${settings.theme === "dark" ? "text-gray-400" : "text-gray-600"}`}
                              >
                                {topDecks[1].count}
                                {t.games} • {topDecks[1].winRate.toFixed(1)}%
                              </div>
                            </div>
                          </div>
                        ) : (
                          <div
                            className={`p-2 rounded-lg border flex-1 flex items-center justify-center ${
                              settings.theme === "dark" ? "bg-gray-700 border-gray-600" : "bg-gray-50 border-gray-200"
                            }`}
                          >
                            <div className={`text-xs ${settings.theme === "dark" ? "text-gray-500" : "text-gray-400"}`}>
                              -
                            </div>
                          </div>
                        )}

                        {topDecks[2] ? (
                          <div
                            className={`p-2 rounded-lg border flex-1 ${
                              settings.theme === "dark"
                                ? "bg-gray-700 border-gray-600"
                                : "bg-yellow-50 border-yellow-200"
                            }`}
                          >
                            <div className={settings.theme === "dark" ? "text-white" : "text-gray-800"}>
                              <div
                                className={`text-xs font-medium mb-1 ${settings.theme === "dark" ? "text-gray-400" : "text-gray-600"}`}
                              >
                                {t.rank3}
                              </div>
                              <div className="text-sm font-bold mb-1 truncate" title={topDecks[2].deck}>
                                {topDecks[2].deck}
                              </div>
                              <div
                                className={`text-xs ${settings.theme === "dark" ? "text-gray-400" : "text-gray-600"}`}
                              >
                                {topDecks[2].count}
                                {t.games} • {topDecks[2].winRate.toFixed(1)}%
                              </div>
                            </div>
                          </div>
                        ) : (
                          <div
                            className={`p-2 rounded-lg border flex-1 flex items-center justify-center ${
                              settings.theme === "dark" ? "bg-gray-700 border-gray-600" : "bg-gray-50 border-gray-200"
                            }`}
                          >
                            <div className={`text-xs ${settings.theme === "dark" ? "text-gray-500" : "text-gray-400"}`}>
                              -
                            </div>
                          </div>
                        )}
                      </div>
                    </div>
                  )
                })()}
              </CardContent>
            </Card>

            <Card
              className={`shadow-sm ${settings.theme === "dark" ? "bg-gray-800 border-gray-700" : "border-gray-200"}`}
            >
              <CardHeader className="pb-3">
                <CardTitle
                  className={`text-sm font-semibold flex items-center ${settings.theme === "dark" ? "text-white" : "text-gray-800"}`}
                >
                  <Target className="h-4 w-4 mr-1 text-blue-500" />
                  {t.positionAnalysis}
                </CardTitle>
              </CardHeader>
              <CardContent className="pt-0">
                <div className="grid grid-cols-2 gap-3">
                  <div
                    className={`p-3 rounded-lg border ${settings.theme === "dark" ? "bg-gray-700 border-gray-600" : "bg-blue-50 border-blue-200"}`}
                  >
                    <div
                      className={`text-sm font-bold ${settings.theme === "dark" ? "text-blue-400" : "text-blue-800"}`}
                    >
                      {t.firstPosition}
                    </div>
                    <div
                      className={`text-lg font-bold ${settings.theme === "dark" ? "text-blue-300" : "text-blue-900"}`}
                    >
                      {positionStats.first.winRate.toFixed(1)}%
                    </div>
                    <div className={`text-xs ${settings.theme === "dark" ? "text-gray-400" : "text-gray-600"}`}>
                      {positionStats.first.wins}
                      {t.wins} {positionStats.first.losses}
                      {t.losses}
                    </div>
                  </div>
                  <div
                    className={`p-3 rounded-lg border ${settings.theme === "dark" ? "bg-gray-700 border-gray-600" : "bg-red-50 border-red-200"}`}
                  >
                    <div className={`text-sm font-bold ${settings.theme === "dark" ? "text-red-400" : "text-red-800"}`}>
                      {t.secondPosition}
                    </div>
                    <div className={`text-lg font-bold ${settings.theme === "dark" ? "text-red-300" : "text-red-900"}`}>
                      {positionStats.second.winRate.toFixed(1)}%
                    </div>
                    <div className={`text-xs ${settings.theme === "dark" ? "text-gray-400" : "text-gray-600"}`}>
                      {positionStats.second.wins}
                      {t.wins} {positionStats.second.losses}
                      {t.losses}
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card
              className={`shadow-sm ${settings.theme === "dark" ? "bg-gray-800 border-gray-700" : "border-gray-200"}`}
            >
              <CardHeader className="pb-3">
                <CardTitle
                  className={`text-sm font-semibold flex items-center ${settings.theme === "dark" ? "text-white" : "text-gray-800"}`}
                >
                  <TrendingUp className="h-4 w-4 mr-1 text-green-500" />
                  {t.deckWinRate}
                </CardTitle>
              </CardHeader>
              <CardContent className="pt-0">
                <div className="space-y-2 max-h-40 overflow-y-auto">
                  {deckStats.map((deck, index) => (
                    <div
                      key={index}
                      className={`p-3 rounded-lg border shadow-sm ${settings.theme === "dark" ? "bg-gray-700 border-gray-600" : "bg-white border-gray-200"}`}
                    >
                      <div className="flex justify-between items-center mb-1">
                        <span
                          className={`font-bold text-sm ${settings.theme === "dark" ? "text-white" : "text-gray-800"}`}
                        >
                          {deck.deck}
                        </span>
                        <span
                          className={`px-2 py-1 rounded-full text-white font-medium text-xs ${
                            deck.winRate >= 60 ? "bg-green-500" : deck.winRate >= 40 ? "bg-blue-500" : "bg-red-500"
                          }`}
                        >
                          {deck.winRate.toFixed(0)}%
                        </span>
                      </div>
                      <div className={`text-xs ${settings.theme === "dark" ? "text-gray-400" : "text-gray-600"}`}>
                        {deck.total}
                        {t.games} • {deck.wins}
                        {t.wins} {deck.losses}
                        {t.losses}
                        {deck.avgWinStreak > 0 && (
                          <span className="ml-2 text-green-600">
                            {t.avgWinStreak}: {deck.avgWinStreak.toFixed(1)}
                          </span>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            {timeStats.length > 0 && (
              <Card
                className={`shadow-sm ${settings.theme === "dark" ? "bg-gray-800 border-gray-700" : "border-gray-200"}`}
              >
                <CardHeader className="pb-3">
                  <CardTitle
                    className={`text-sm font-semibold flex items-center ${settings.theme === "dark" ? "text-white" : "text-gray-800"}`}
                  >
                    <Clock className="h-4 w-4 mr-1 text-purple-500" />
                    {t.timeAnalysis}
                  </CardTitle>
                </CardHeader>
                <CardContent className="pt-0">
                  <div className="space-y-2">
                    {timeStats.map((time, index) => (
                      <div
                        key={index}
                        className={`flex justify-between items-center p-2 rounded ${settings.theme === "dark" ? "bg-gray-700" : "bg-gray-50"}`}
                      >
                        <span className={`text-sm font-medium ${settings.theme === "dark" ? "text-white" : ""}`}>
                          {time.time === "morning"
                            ? t.morning
                            : time.time === "afternoon"
                              ? t.afternoon
                              : time.time === "evening"
                                ? t.evening
                                : time.night}
                        </span>
                        <div className="text-right">
                          <div className={`text-sm font-bold ${settings.theme === "dark" ? "text-white" : ""}`}>
                            {time.winRate.toFixed(1)}%
                          </div>
                          <div className={`text-xs ${settings.theme === "dark" ? "text-gray-400" : "text-gray-600"}`}>
                            {time.wins}
                            {t.wins} {time.losses}
                            {t.losses}
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            )}
          </TabsContent>

          <TabsContent value="matchup" className="space-y-4">
            <div className="mb-4">
              <Select value={matchupSortBy} onValueChange={setMatchupSortBy}>
                <SelectTrigger
                  className={`w-full h-8 text-xs ${settings.theme === "dark" ? "bg-gray-800 border-gray-600 text-white" : ""}`}
                >
                  <SelectValue placeholder="정렬 기준" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="winRate">승률순</SelectItem>
                  <SelectItem value="yourDeck">내 덱순</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <Card
              className={`shadow-sm ${settings.theme === "dark" ? "bg-gray-800 border-gray-700" : "border-gray-200"}`}
            >
              <CardHeader className="pb-3">
                <CardTitle
                  className={`text-sm font-semibold ${settings.theme === "dark" ? "text-white" : "text-gray-800"}`}
                >
                  {t.matchupAnalysis}
                </CardTitle>
              </CardHeader>
              <CardContent className="pt-0">
                <div className="space-y-3 max-h-80 overflow-y-auto">
                  {matchupStats.length === 0 ? (
                    <div
                      className={`text-center text-sm py-8 ${settings.theme === "dark" ? "text-gray-400" : "text-gray-500"}`}
                    >
                      {t.matchupMinGames}
                    </div>
                  ) : (
                    sortedMatchupStats.map((matchup, index) => {
                      const getMatchupStatus = (winRate: number) => {
                        if (winRate >= 65) return { text: t.advantage, color: "bg-green-500", icon: "💪" }
                        if (winRate >= 45) return { text: t.equal, color: "bg-blue-500", icon: "⚖️" }
                        return { text: t.disadvantage, color: "bg-red-500", icon: "😰" }
                      }

                      const status = getMatchupStatus(matchup.winRate)

                      return (
                        <div
                          key={index}
                          className={`p-4 rounded-lg border shadow-sm ${settings.theme === "dark" ? "bg-gray-700 border-gray-600" : "bg-white border-gray-200"}`}
                        >
                          <div className="flex items-center justify-between mb-3">
                            <div className="flex items-center gap-3 flex-1">
                              <div className="flex items-center gap-1">
                                <User className="h-3 w-3 text-blue-500" />
                                <span
                                  className={`font-bold text-sm ${settings.theme === "dark" ? "text-white" : "text-gray-800"}`}
                                >
                                  {matchup.yourDeck}
                                </span>
                              </div>

                              <span
                                className={`text-xs ${settings.theme === "dark" ? "text-gray-400" : "text-gray-500"}`}
                              >
                                vs
                              </span>

                              <div className="flex items-center gap-1">
                                <Users className="h-3 w-3 text-red-500" />
                                <span
                                  className={`font-bold text-sm ${settings.theme === "dark" ? "text-white" : "text-gray-800"}`}
                                >
                                  {matchup.opponentDeck}
                                </span>
                              </div>
                            </div>

                            <div className="text-right">
                              <div className="flex items-center gap-2 mb-1">
                                <span className="text-lg">{status.icon}</span>
                                <span
                                  className={`px-2 py-1 rounded-full text-white font-medium text-xs ${status.color}`}
                                >
                                  {matchup.winRate.toFixed(0)}%
                                </span>
                              </div>
                              <div className={`text-xs font-bold ${status.color.replace("bg-", "text-")}`}>
                                {status.text}
                              </div>
                            </div>
                          </div>

                          <div className={`text-xs ${settings.theme === "dark" ? "text-gray-400" : "text-gray-600"}`}>
                            총 {matchup.total}
                            {t.games} • {matchup.wins}
                            {t.wins} {matchup.losses}
                            {t.losses}
                          </div>
                        </div>
                      )
                    })
                  )}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="history" className="space-y-4">
            <div className="space-y-3">
              <div className="flex gap-2">
                <Select value={filterDeck} onValueChange={setFilterDeck}>
                  <SelectTrigger
                    className={`flex-1 h-8 text-xs ${settings.theme === "dark" ? "bg-gray-800 border-gray-600 text-white" : ""}`}
                  >
                    <SelectValue placeholder={t.yourDeckHeader} />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">{t.allDecks}</SelectItem>
                    {uniqueDecks.map((deck) => (
                      <SelectItem key={deck} value={deck}>
                        {deck}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <Select value={filterOpponentDeck} onValueChange={setFilterOpponentDeck}>
                  <SelectTrigger
                    className={`flex-1 h-8 text-xs ${settings.theme === "dark" ? "bg-gray-800 border-gray-600 text-white" : ""}`}
                  >
                    <SelectValue placeholder={t.opponentHeader} />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">{t.allOpponents}</SelectItem>
                    {uniqueOpponentDecks.map((deck) => (
                      <SelectItem key={deck} value={deck}>
                        {deck}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              <div className="flex gap-2">
                <Select value={filterResult} onValueChange={setFilterResult}>
                  <SelectTrigger
                    className={`flex-1 h-8 text-xs ${settings.theme === "dark" ? "bg-gray-800 border-gray-600 text-white" : ""}`}
                  >
                    <SelectValue placeholder={t.resultHeader} />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">{t.allResults}</SelectItem>
                    <SelectItem value="win">{t.winsOnly}</SelectItem>
                    <SelectItem value="lose">{t.lossesOnly}</SelectItem>
                  </SelectContent>
                </Select>
                <Select value={sortBy} onValueChange={setSortBy}>
                  <SelectTrigger
                    className={`flex-1 h-8 text-xs ${settings.theme === "dark" ? "bg-gray-800 border-gray-600 text-white" : ""}`}
                  >
                    <SelectValue placeholder="정렬" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="date">{t.sortByDate}</SelectItem>
                    <SelectItem value="yourDeck">{t.sortByYourDeck}</SelectItem>
                    <SelectItem value="opponentDeck">{t.sortByOpponentDeck}</SelectItem>
                    <SelectItem value="result">{t.sortByResult}</SelectItem>
                  </SelectContent>
                </Select>
                <Button
                  variant="outline"
                  size="sm"
                  className={`px-2 ${settings.theme === "dark" ? "bg-gray-800 border-gray-700 text-white" : "bg-transparent"}`}
                >
                  <ArrowUpDown className="h-3 w-3" />
                </Button>
              </div>
            </div>

            <Card
              className={`shadow-sm ${settings.theme === "dark" ? "bg-gray-800 border-gray-700" : "border-gray-200"}`}
            >
              <CardContent className="p-3">
                <div
                  className={`text-sm font-semibold mb-3 ${settings.theme === "dark" ? "text-white" : "text-gray-800"}`}
                >
                  {t.allMatches} ({filteredMatches.length}
                  {t.games})
                </div>
                <div className="space-y-2 max-h-80 overflow-y-auto">
                  {filteredMatches.length === 0 ? (
                    <div
                      className={`text-center text-sm py-8 ${settings.theme === "dark" ? "text-gray-400" : "text-gray-500"}`}
                    >
                      {t.noMatchHistory}
                    </div>
                  ) : (
                    filteredMatches.map((match, index) => {
                      const date = new Date(match.timestamp)
                      const dateStr = date.toLocaleDateString("ko-KR", { month: "short", day: "numeric" })
                      const timeStr = date.toLocaleTimeString("ko-KR", { hour: "2-digit", minute: "2-digit" })

                      return (
                        <div
                          key={index}
                          className={`p-3 rounded-lg border shadow-sm transition-colors ${
                            settings.theme === "dark"
                              ? `${match.result === "win" ? "bg-green-900/20 border-green-800" : "bg-red-900/20 border-red-800"}`
                              : `${match.result === "win" ? "bg-green-50 border-green-200" : "bg-red-50 border-red-200"}`
                          }`}
                        >
                          <div className="flex justify-between items-start mb-2">
                            <div className="flex-1">
                              <div
                                className={`font-bold text-sm ${settings.theme === "dark" ? "text-white" : "text-gray-800"}`}
                              >
                                {match.yourDeck} vs {match.opponentDeck}
                              </div>
                              <div
                                className={`text-xs ${settings.theme === "dark" ? "text-gray-400" : "text-gray-600"}`}
                              >
                                {dateStr} {timeStr} • {match.position === "first" ? t.firstShort : t.secondShort}
                              </div>
                            </div>
                            <div className="text-right">
                              <span
                                className={`px-2 py-1 rounded-full text-white font-medium text-xs ${
                                  match.result === "win" ? "bg-green-500" : "bg-red-500"
                                }`}
                              >
                                {match.result.toUpperCase()}
                              </span>
                              {match.winStreak > 1 && (
                                <div className="text-xs text-green-600 font-bold mt-1">{match.winStreak}연승</div>
                              )}
                            </div>
                          </div>
                        </div>
                      )
                    })
                  )}
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  )
}
